# https://blog.callr.tech/building-docker-images-with-gitlab-ci-best-practices/

stages:
    - build
    - deploy-image
    - deploy-cloudrun

default:
  image: docker:19

variables:
  DOCKER_BUILDKIT: 1

before_script:
  # docker login asks for the password to be passed through stdin for security
  # we use $CI_JOB_TOKEN here which is a special token provided by GitLab
  - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  - cat $GOOGLE_SA | docker login -u _json_key --password-stdin https://us-docker.pkg.dev

.build:
  stage: build
  script:
    - cp $dotEnv .env
    # fetches the latest image (not failing if image is not found)
    - docker pull $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:latest || true
    # builds the project, passing proxy variables, and vcs vars for LABEL
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to 
    # the GitLab registry
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:latest
      --tag $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:latest
      --tag $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:latest

build-dev:
  extends: .build
  environment: dev
  only:
    - develop

build-prd:
  extends: .build
  environment: prd
  only:
    - master

.deploy-to-gar:
  stage: deploy-image
  allow_failure: false
  script:
    # fetch the image
    - docker pull $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:$CI_COMMIT_SHA
    # tag and push to Artifact Registry
    - docker tag $CI_REGISTRY_IMAGE/$CI_ENVIRONMENT_SLUG:$CI_COMMIT_SHA $GAR_REPO:latest
    - docker push $GAR_REPO:latest

deploy-to-gar-dev:
  extends: .deploy-to-gar
  environment: dev
  only:
    - develop

deploy-to-gar-prd:
  extends: .deploy-to-gar
  environment: prd
  only:
    - master

.deploy-to-cloudrun:
  stage: deploy-cloudrun
  image: gcr.io/google.com/cloudsdktool/cloud-sdk:alpine
  variables:
    SlackTemplate: >-
        $CI_ENVIRONMENT_URL deployed by ${GITLAB_USER_NAME}'s <$CI_PIPELINE_URL|pipeline> on
        branch <$CI_PROJECT_URL/-/commits/$CI_COMMIT_REF_NAME|$CI_COMMIT_REF_NAME>
        of <$CI_PROJECT_URL/-/tree/$CI_COMMIT_REF_NAME|$CI_PROJECT_PATH>.

        Commit message: <${CI_PROJECT_URL}/commit/${CI_COMMIT_SHA}|$CI_COMMIT_SHORT_SHA> ${CI_COMMIT_MESSAGE}
    SlackWebhook: 'https://hooks.slack.com/services/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'
  before_script: []
  script:
    - gcloud auth activate-service-account --key-file=$GOOGLE_SA
    - gcloud --project=$GCP_PROJECT run deploy clime-web --region=us-east1 --image $GAR_REPO:latest --ingress=internal-and-cloud-load-balancing
    - apk add --no-cache jq
    - >-
        jq -n --arg msg "$SlackTemplate" '{text: $msg}'
        |
        curl -sS -o - -X POST -H 'Content-type: application/json'
        --data @-
        $SlackWebhook

deploy-to-cloudrun-dev:
  extends: .deploy-to-cloudrun
  environment: dev
  only:
    - develop

deploy-to-cloudrun-prd:
  extends: .deploy-to-cloudrun
  environment: prd
  only:
    - master
